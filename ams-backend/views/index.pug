extends layout

block content
  h1= title
  p Welcome to Adaptive Media Streaming Reporting System

  p Test ID: #{test_id}
  p Number of Iterations: #{num_iterations}


  p Metric Results: Manifest Delays
  table(border='1' width='100%')
    thead
         tr
            th Iteration Number
            th Manifest Delay (ms)
    tbody
        each value, i in manifest_delay_detail
            tr
               td= value.it_num
               td= value.val



  #container
    <canvas id="myChart" width="100%" height="40"></canvas>

  div
    p Metric Results: Playback Delays


  table(border='1' width='100%')
    thead
         tr
            th Iteration Number
            th Playback Delay (ms)
    tbody
        each value, i in playback_delay_detail
            tr
               td= value.it_num
               td= value.val

  #container
    <canvas id="myChart1" width="100%" height="50"></canvas>

  div
    p Metric Results: Dropped Frames:


  table(border='1' width='100%')
    thead
         tr
            th Iteration Number
            th Dropped Frames
    tbody
        each value, i in dropped_frames_detail
            tr
               td= value.it_num
               td= value.val

  #container
    <canvas id="droppedFrames" width="100%" height="50"></canvas>

  div
    p Metric Results: Stream Initialization Delay:


  table(border='1' width='100%')
    thead
         tr
            th Iteration Number
            th Stream Initialization Delay
    tbody
        each value, i in stream_initialization_delay_detail
            tr
               td= value.it_num
               td= value.val

  #container
    <canvas id="streamInitialization" width="100%" height="50"></canvas>

  div
    p Metric Results: Quality Change Delay:


  table(border='1' width='100%')
    thead
         tr
            th Iteration Number
            th Quality Change Delay
    tbody
        each value, i in quality_change_delay_details
            tr
               td= value.it_num
               td= value.val

  #container
    <canvas id="qualityChangeDelay" width="100%" height="50"></canvas>


  div
    p Metric Results: Playback Seeking Delay:


  table(border='1' width='100%')
    thead
         tr
            th Iteration Number
            th Playback Seeking Delay
    tbody
        each value, i in playback_seeking_delay_details
            tr
               td= value.it_num
               td= value.val

  #container
    <canvas id="playBackSeekingDelay" width="100%" height="50"></canvas>

  div
    p Metric Results: Buffer Stable Time:


  table(border='1' width='100%')
    thead
         tr
            th Iteration Number
            th Buffer Stable Time
    tbody
        each value, i in buffer_stable_time_details
            tr
               td= value.it_num
               td= value.val

  #container
    <canvas id="bufferStabletime" width="100%" height="50"></canvas>

  div
    p Metric Results: Playback Rate:


  table(border='1' width='100%')
    thead
         tr
            th Iteration Number
            th Playback Rate
    tbody
        each value, i in playback_rate_details
            tr
               td= value.it_num
               td= value.val

  #container
    <canvas id="playBackRate" width="100%" height="50"></canvas>

  div
    p Metric Results: Buffer Level:


  table(border='1' width='100%')
    thead
         tr
            th Iteration Number
            th Buffer Level
    tbody
        each value, i in buffer_level_avg_details
            tr
               td= value.it_num
               td= value.val

  #container
    <canvas id="bufferLevel" width="100%" height="50"></canvas>
  //    div
  //        p Metric Results: Memory Usage:
  //
  //
  //    table(border='1' width='100%')
  //        thead
  //            tr
  //                th Iteration Number
  //                th Memory Usage
  //        tbody
  //            each value, i in memory_usage_details
  //                tr
  //                    td= value.it_num
  //                    td= value.val
  //
  //#container
  //   <canvas id="memoryUsage" width="100%" height="50"></canvas>

block script
  script.
        var ctx = document.getElementById("myChart");
        var myChart = new Chart(ctx, {
          type: 'line',
          data: {
              labels: !{manifest_iteration_num},
              datasets: [{
                  label: '# Manifest Delay (ms)',
                  data: !{manifest_delay_graph},
                  backgroundColor:'rgba(255, 99, 132, 0.2)',
                  borderColor: 'rgba(255,99,132,1)',
                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                  yAxes: [{
                      stacked: true
                   }]
               }
          }
      });

     var ctx = document.getElementById("myChart1");
        var myChart = new Chart(ctx, {
          type: 'line',
          data: {
              labels: !{playback_iteration_num},
              datasets: [{
                  label: '# Playback Delay (ms)',
                  data: !{playback_delay_graph},
                  borderColor: 'rgba(255,99,132,1)',
                  backgroundColor:'rgba(255, 99, 132, 0.2)',
                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                  xAxes: [{
                        stacked: true
                  }],
              }
          }
      });


      var ctx = document.getElementById("droppedFrames");
        var droppedFrames = new Chart(ctx, {
          type: 'line',
          data: {
              labels: !{dropped_frames_iteration_num},
              datasets: [{
                  label: '# Dropped Frames ',
                  data: !{dropped_frames_graph},
                  backgroundColor:'rgba(255, 99, 132, 0.2)',
                  borderColor: 'rgba(255,99,132,1)',
                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                  xAxes: [{
                        stacked: true
                  }],
              }
          }
      });

      var ctx = document.getElementById("streamInitialization");
        var streamInitialization = new Chart(ctx, {
          type: 'line',
          data: {
              labels: !{stream_initialization_iteration_num},
              datasets: [{
                  label: '# Stream Initialization Delays (ms) ',
                  data: !{stream_initialization_graph},
                  backgroundColor:'rgba(255, 99, 132, 0.2)',
                  borderColor: 'rgba  (255,99,132,1)',
                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                    xAxes: [{
                        stacked: true
                    }],
              }
          }
      });

      var ctx = document.getElementById("qualityChangeDelay");
        var qualityChangeDelay = new Chart(ctx, {
          type: 'line',
          data: {
              labels: !{qulity_change_iteration_num},
              datasets: [{
                  label: '# Quality Change Delays (ms) ',
                  data: !{qulity_change_graph},
                  backgroundColor:'rgba(255, 99, 132, 0.2)',
                  borderColor: 'rgba(255,99,132,1)',
                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                  xAxes: [{
                        stacked : true
                  }],
              }
          }
      });

      var ctx = document.getElementById("playBackSeekingDelay");
        var playBackSeekingDelay = new Chart(ctx, {
          type: 'line',
          data: {
              labels: !{playback_seeking_iteration_num},
              datasets: [{
                  label: '# PlayBack Seeking Delays (ms) ',
                  data: !{playback_seeking_graph},
                  backgroundColor:'rgba(255, 99, 132, 0.2)',
                  borderColor: 'rgba(255,99,132,1)',
                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                  xAxes: [{
                        stacked : true
                  }],
              }
          }
      });

      var ctx = document.getElementById("bufferStabletime");
        var bufferStabletime = new Chart(ctx, {
          type: 'line',
          data: {
              labels: !{buffer_stable_time_iteration_num},
              datasets: [{
                  label: '# Buffer Stable Time (ms) ',
                  data: !{buffer_stable_time_graph},
                  backgroundColor:'rgba(255, 99, 132, 0.2)',
                  borderColor: 'rgba(255,99,132,1)',
                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                  xAxes: [{
                        stacked : true
                  }],
              }
          }
      });
      var ctx = document.getElementById("playBackRate");
        var playBackRate = new Chart(ctx, {
          type: 'line',
          data: {
              labels: !{playback_rate_iteration_num},
              datasets: [{
                  label: '# Playback Rate (ms) ',
                  data: !{playback_rate_graph},
                  backgroundColor:'rgba(255, 99, 132, 0.2)',
                  borderColor: 'rgba(255,99,132,1)',
                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                  xAxes: [{
                        stacked : true
                  }],
              }
          }
      });
      var ctx = document.getElementById("bufferLevel");
        var bufferLevel = new Chart(ctx, {
          type: 'line',
          data: {
              labels: !{buffer_level_avg_iteration_num},
              datasets: [{
                  label: '# Buffer Level ',
                  data: !{buffer_level_avg_graph},
                  backgroundColor:'rgba(255, 99, 132, 0.2)',
                  borderColor: 'rgba(255,99,132,1)',
                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                  xAxes: [{
                        stacked : true
                  }],
              }
          }
      });

    //var ctx = document.getElementById("memoryUsage");
    //var memoryUsage = new Chart(ctx, {
    //    type: 'line',
    //data: {
    //    labels: !{memory_usage_iteration_num},
    //    datasets: [{
    //        label: '# Memory Usage (bytes) ',
    //        data: !{memory_usage_graph},
    //        backgroundColor:'rgba(255, 99, 132, 0.2)',
    //        borderColor: 'rgba(255,99,132,1)',
    //        borderWidth: 1
    //    }]
    //},
    //    options: {
    //        scales: {
    //            xAxes: [{
    //                stacked : true
    //            }],
    //        }
    //    }
    //});


